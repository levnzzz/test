//最大堆实现：完全二叉树+任意结点是为所有子树最大值+先序遍历
MaxHeap Create(int MaxSize);
Boolean IsFull(MaxHeap H);
Insert(MaxHeap H,ElementType X);
Boolean IsEmpty(MaxHeap H);
ElementType DeletMax(MaxHeap H);


typedef struct HeapStruct
{
    ElementType* Element;////储存堆元素的数组
    int Size;//当前元素个数
    int Capacity;//最大容量
}HeapStruct,*MaxHeap;

MaxHeap Create(int MaxSize)//最大堆的创建
{
    MaxHeap H=(MaxHeap)malloc(sizeof(HeapStruct));
    H->Element=(ElementType)malloc((MaxSize+1)sizeof(ElementType));
    H->Size=0;
    H->Capacity=MaxSize;
    H->Element[0]=MaxDATA;
    return H;
}

Boolean IsFull(MaxHeap H)
{
    return Size==Capacity;
}

void Insert(MaxHeap H,ElementType X)//最大堆的插入
{
    int i;
    if(IsFull())
        return;
    else
    {
        i=++H->Size;
        for(;H->Element[i/2]<X;i/=2)
            H->Element[i]=H->Element[i/2];
        H->Element[i]=X;
    }
}

MaxElementTypeHeap DeleteMax(MaxHeap H)//弹出最大值 还有更好的的办法  有空写
{
    int parent ,child;
    ElementType MaxItem,Tmp;
    if(IsEmpty(MaxHeap H))
    {
        prinft("ERROR");
        return 0;
    }
    MaxItem=H->Element[1];
    Tmp=H->Element[--H->Size];
    for(parent=1;parent*2<H->Size;parent=child)
    {
        child=parent*2;
        if(H->Element[child]<H->Element[child+1])
            child++;
        if(Tmp>=H->Element[child]) break;
        else H->Element[parent]=H->Element[child];
    }
    H->Element[parent]=Tmp;
    return MaxItem;
}

MaxHeap Create(int MaxSize)//先形成完全二叉树 再实行调整 有空来写
{

}



